# General Spring configuration; enable graceful shutdown with a timeout per phase, and remove the
# logging shutdown hook since we're already doing this ourselves in the shutdown hook
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s
logging.register-shutdown-hook=false
# Embedded HTTP server configuration for monitoring
# Defaults are picked from the previous Zeebe specific defaults for backwards compatibility
# We omit the use of management.server since that's only when you want to have two different servers
# In our case, we only have one server purely for management, so we should use the default server
# configurations
server.address=0.0.0.0
server.port=9600
# General management configuration; disable all endpoints by default but exposes all enabled ones
# via web. Endpoints should be enabled individually based on the target application
management.endpoints.enabled-by-default=false
management.endpoints.web.exposure.include=*
# Health configuration; disable default health indicators. As it's unclear how to do this globally,
# only the ones which currently would get enabled are explicitly disabled.
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
# Metrics related configurations
management.endpoint.prometheus.enabled=true
management.prometheus.metrics.export.enabled=true
# Allow runtime configuration of log levels
management.endpoint.loggers.enabled=true
# Backups endpoint; as this is an experimental feature, it should be enabled only with care. The API
# is subject to change in the future. To fully enable online backups, you will need to enable this
# management endpoint, and also enable the backups feature flag by setting the following property
# zeebe.broker.experimental.features.enableBackup=true.
management.endpoint.backups.enabled=false
# Disable specific autoconfiguration classes which are triggered automatically (e.g. creating an
# Elastic client which spawns 16 threads)
spring.autoconfigure.exclude=\
  org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration, \
  org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration
